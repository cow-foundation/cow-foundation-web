name: CI

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main, develop]
    tags: [v*]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REPO_NAME_SLUG: cow-foundation-web

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run linting
        run: |
          cd vendor/cowswap
          yarn lint:ci

  typecheck:
    name: Type Check
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Apply patches
        run: ./scripts/apply-patches.sh

      - name: Run type checking
        run: |
          cd vendor/cowswap/apps/cow-fi
          npx tsc --noEmit

  build:
    name: Build
    needs: [setup, lint, typecheck]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Build application
        run: yarn build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 7

  # Call the deploy workflow for different environments
  deploy-preview:
    name: Deploy Preview
    needs: [build]
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      environment: preview

  deploy-staging:
    name: Deploy Staging
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      environment: staging

  deploy-production:
    name: Deploy Production
    needs: [build]
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      environment: production